{"version":3,"sources":["posts.js","users.js","Dashboard.js","authProvider.js","App.js","index.js"],"names":["postFilters","TextInput","source","label","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","PostList","props","List","filters","Datagrid","TextField","ReferenceField","EditButton","ShowButton","PostTitle","record","title","PostEdit","Edit","SimpleForm","disabled","multiline","PostCreate","Create","PostShow","Show","SimpleShowLayout","RichTextField","DateField","UserList","isSmall","useMediaQuery","theme","breakpoints","down","SimpleList","primaryText","name","secondaryText","username","tertiaryText","email","EmailField","Card","CardHeader","CardContent","login","localStorage","setItem","Promise","resolve","logout","removeItem","checkError","status","reject","checkAuth","getItem","getPermissions","App","Admin","dataProvider","jsonServerProvider","authProvider","dashboard","Dashboard","Resource","icon","PostIcon","list","edit","create","show","UserIcon","ListGuesser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e44df31.chunk.js","sourcesContent":["import * as React from 'react';\nimport {\n    Show,\n    ShowButton,\n    SimpleShowLayout,\n    RichTextField,\n    DateField,\n    List,\n    Edit,\n    Create,\n    Datagrid,\n    ReferenceField,\n    TextField,\n    EditButton,\n    ReferenceInput,\n    SelectInput,\n    SimpleForm,\n    TextInput,\n} from 'react-admin';\n\nconst postFilters = [\n    <TextInput source=\"q\" label=\"Search\" alwaysOn />,\n    <ReferenceInput source=\"userId\" label=\"User\" reference=\"users\" allowEmpty>\n        <SelectInput optionText=\"name\" />\n    </ReferenceInput>,\n];\n\nexport const PostList = props => (\n    <List {...props} filters={postFilters}>\n        <Datagrid>\n            <TextField source=\"id\" />\n            <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\n                <TextField source=\"name\" />\n            </ReferenceField>\n            <TextField source=\"title\" />\n            <EditButton />\n            <ShowButton />\n        </Datagrid>\n    </List>\n);\n\nconst PostTitle = ({ record }) => {\n    return <span>Post {record ? `\"${record.title}\"` : ''}</span>;\n};\n\nexport const PostEdit = props => (\n    <Edit title={<PostTitle />} {...props}>\n        <SimpleForm>\n            <TextInput disabled source=\"id\" />\n            <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\">\n                <SelectInput optionText=\"name\" />\n            </ReferenceInput>\n            <TextInput source=\"title\" />\n            <TextInput multiline source=\"body\" />\n        </SimpleForm>\n    </Edit>\n);\n\nexport const PostCreate = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\">\n                <SelectInput optionText=\"name\" />\n            </ReferenceInput>\n            <TextInput source=\"title\" />\n            <TextInput multiline source=\"body\" />\n        </SimpleForm>\n    </Create>\n);\n\nexport const PostShow = props => (\n    <Show {...props}>\n        <SimpleShowLayout>\n            <TextField source=\"title\" />\n            <TextField source=\"teaser\" />\n            <RichTextField source=\"body\" />\n            <DateField label=\"Publication date\" source=\"created_at\" />\n        </SimpleShowLayout>\n    </Show>\n);\n","import * as React from 'react';\nimport { useMediaQuery } from '@material-ui/core';\nimport { SimpleList, List, Datagrid, EmailField, TextField } from 'react-admin';\n\nexport const UserList = props => {\n    const isSmall = useMediaQuery(theme => theme.breakpoints.down('sm'));\n\n    return (\n        <List title=\"All users\" {...props}>\n            {isSmall ? (\n                <SimpleList\n                    primaryText={record => record.name}\n                    secondaryText={record => record.username}\n                    tertiaryText={record => record.email}\n                />\n            ) : (\n                <Datagrid>\n                    <TextField source=\"id\" />\n                    <TextField source=\"name\" />\n                    <TextField source=\"username\" />\n                    <EmailField source=\"email\" />\n                </Datagrid>\n            )}\n        </List>\n    );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport * as React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\n\nexport default () => (\n  <Card>\n    <CardHeader title=\"Welcome to the tutorial\" />\n    <CardContent>Lorem ipsum sic dolor amet...</CardContent>\n  </Card>\n);\n","/* eslint-disable import/no-anonymous-default-export */\nexport default {\n    // called when the user attempts to log in\n    login: ({ username }) => {\n        localStorage.setItem('username', username);\n        // accept all username/password combinations\n        return Promise.resolve();\n    },\n    // called when the user clicks on the logout button\n    logout: () => {\n        localStorage.removeItem('username');\n        return Promise.resolve();\n    },\n    // called when the API returns an error\n    checkError: ({ status }) => {\n        if (status === 401 || status === 403) {\n            localStorage.removeItem('username');\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    },\n    // called when the user navigates to a new location, to check for authentication\n    checkAuth: () => {\n        return localStorage.getItem('username')\n            ? Promise.resolve()\n            : Promise.reject();\n    },\n    // called when the user navigates to a new location, to check for permissions / roles\n    getPermissions: () => Promise.resolve(),\n};\n","import * as React from 'react';\nimport PostIcon from '@material-ui/icons/Book';\nimport UserIcon from '@material-ui/icons/Group';\nimport { Admin, Resource, ListGuesser } from 'react-admin';\nimport jsonServerProvider from 'ra-data-json-server';\n\nimport { PostList, PostEdit, PostCreate, PostShow } from './posts';\nimport { UserList } from './users';\nimport Dashboard from './Dashboard';\nimport authProvider from './authProvider';\n\nconst App = () => ( \n    <Admin\n        dataProvider={jsonServerProvider(\n            'https://jsonplaceholder.typicode.com'\n        )}\n        authProvider={authProvider}\n        dashboard={Dashboard}\n    >\n        <Resource\n            name=\"posts\"\n            icon={PostIcon}\n            list={PostList}\n            edit={PostEdit}\n            create={PostCreate}\n            show={PostShow}\n        />\n        <Resource name=\"users\" icon={UserIcon} list={UserList} />\n        <Resource name=\"comments\" list={ListGuesser} />\n    </Admin>\n);\nexport default App;\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}